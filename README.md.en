wasavi (VI editor for any web page)
====================================

What is it?
-----------

wasavi is an extension for Chrome, Opera, Firefox browser. wasavi extends 
TEXTAREA element on any page. 

wasavi supports almost all of vi commands and some ex commands, so you can edit
a text with vi's interface.

making of wasavi is under continuation. any request for function, or any bug
information will be welcomed!



Screenshots
-----------

* there is native TEXTAREA element:
  ![native textarea](http://appsweets.net/wasavi/wasavi_native_textarea.jpg)

* focus the TEXTAREA, and press Ctrl+Enter. then wasavi will be executed:
  ![wasavi running](http://appsweets.net/wasavi/wasavi.jpg)

* wasavi supports some ex commands. ":set all" command output is as follows:
  ![set all](http://appsweets.net/wasavi/wasavi_set_all.jpg)

* incremental-search ported from vim:
  ![incremental search](http://appsweets.net/wasavi/wasavi_incremental_search.jpg)

* <http://wasavi.appsweets.net/> is special address. open this address with the
  browser which installed wasavi, wasavi will be executed automatically.
  on this page, you can load and save from/to dropbox.
  ![stand alone](http://appsweets.net/wasavi/wasavi_stand_alone.png)



How to install
--------------

Currently, there are extension packages for the following browsers:

* Google Chrome

  <https://chrome.google.com/webstore/detail/dgogifpkoilgiofhhhodbodcfgomelhe>

* Opera

  <https://addons.opera.com/en/extensions/details/wasavi/>

* Firefox

  <https://addons.mozilla.org/en-US/firefox/addon/wasavi/>

Click one of link above, and install in accordance with the standard manners
of each browser.

Opera note: since Opera does not support "DOM3 Composition Event", so the input
via IME is not available.

Source code is hosted on <https://github.com/akahuku/wasavi>. 
Latest develop versions are hosted on <http://appsweets.net/wasavi/>.



How to use
----------

### extend a textarea

focus to TEXTAREA element of a web page, and press Ctrl+Enter. Of course, to
quit wasavi, press ZZ / :q / :wq etc.

### use under environment of vimperator on Firefox

put
<https://raw.github.com/akahuku/wasavi/master/mediators/vimperator/wasavi_mediator.js>
into your vimperator plugin directory (~/.vimperator/plugin or %HOME%\vimperator\plugin).
this plugin controls the pass-through mode of vimperator according to the state
of wasavi.

And, on <http://wasavi.appsweets.net/>, enter
`:ignorekeys add ^http://wasavi\\.appsweets\\.net/` to vimperator.
then on the page, vimperator always becomes pass-through mode.

settings of ignorekeys command are saved automatically, therefore it's enough to do once.

### use as a independent text editor

Browse <http://wasavi.appsweets.net/>. wasavi will be executed automaticaly.
In this mode, ex command edit, read, file, write are available. these commands
can save and load file on dropbox.



* * *



Commands implemented
--------------------

* [count] operation [count] motion
* [count] operation [count] range-symbol
* [count] operation-alias
* [count] motion
* [count] scroll-command
* [count] edit-command
* : ex-command

### operation:

* c y d &gt; &lt;

### operation-alias:

* cc yy dd &gt;&gt; &lt;&lt; C Y D 

### motion:

* &#45; &#43; ^ &lt;home&gt; $ &lt;end&gt; % | comma(,) ;
  &#95; / ? ' ` ( ) { } [[ ]] &lt;enter&gt; 0
  j k h l ^N ^P ^H
  &lt;down&gt; &lt;up&gt; &lt;left&gt; &lt;right&gt; &lt;space&gt;
  w W b B e E gg gj gk g^ g$ gi G H M L f F t T n N

### range-symbol (also known as "text object" in vim):

* a" a' a` a[ a] a{ a} aB a< a> a( a) ab aw aW ap as
* i" i' i` i[ i] i{ i} iB i< i> i( i) ib iw iW ip is

### scroll-command:

* ^U ^D ^Y ^E ^B ^F &lt;pageup&gt; &lt;pagedown&gt;
  z&lt;enter&gt; z. zz z-

### edit-command:

* x X &lt;delete&gt; p P J period( . ) u ^R ~ ^L ^G m @ q r R
  a A i I o O & s S ZZ

### ex-command:

* abbreviate copy delete edit file global join k map mark marks move
  options print put quit read redo s & ~ set registers to
  unabbreviate undo unmap version v write wq xit yank
  > < @ &#42;

Specifying addresses in ex command is full supported: absolute line number,
relative line number, regal expression. also, wasavi accepts offset.



Commands in input mode
--------------------

* ^D ^H ^T ^U ^V ^W

^D accepts the last ^ and 0.



Commands in line input mode
--------------------

* ^A: move cursor to top of line
* ^B: back
* ^E: move cursor to end of line
* ^F: forward
* ^H: delete a character
* ^N: next history
* ^P: previous history
* ^U: delete whole line
* ^V: literal input
* ^W: delete a word



* * *

vim-compatible functionalities
----------------

* multiple leveled undo/redo
* incremental searching
* range symbols (aka, text objects in vim)
* register ", :, *, / (especially * is important since it accesses to system
  clipboard)
* options: iskeyword, incsearch, smartcase, undolevels, quoteescape, relativenumber



* * *

tips
----------------

* to maximize the wasavi: `:set fullscreen` or `:set fs`
* to restore the wasavi: `:set nofullscreen` or `:set nofs`
* to change a color theme: `:set theme=blight` or `:set theme=charcoal`
* to modify initial settings:
  open preference page of wasavi via extension management functionality
  of each browser (or enter `:options` on wasavi), and edit "exrc" textbox.
* :abbreviate syntax is:
	+ `:abbreviate` displays all the abbreviations currently registered.
	+ `:abbreviate [clear]` clears all the abbreviations.
	+ `:abbreviate lhs` displays the abbreviation corresponding to lhs.
	+ `:abbreviate lhs rhs` registers a abbreviation which
	  expands lhs to rhs.
* :map syntax is:
	+ `:map` displays all the mappings currently registered.
	+ `:map [clear]` clears all the mappings.
	+ `:map lhs rhs` registers a rule which translates lhs to rhs.
	  its translation is recursive.
	+ `:map [noremap] lhs rhs` also registers, but it is
	  non-recursive.
	+ `:map` targets the normal mode mappings. on the other hand,
	  `:map!` targets the insert mode.
* j k ^ $ moves cursor by physical row, on the other hand,
  gj gk g^ g$ moves by wrapped row.
  to swap each behavior: `:set jkdenotative`



* * *

I found the bug!
----------------

Please create an issue on GitHub.

* <http://github.com/akahuku/wasavi/issues>
