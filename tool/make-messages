#! /usr/bin/php
<?php
define('ENCODE_OPTS',  JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);

$basedir = realpath(dirname(__FILE__) . "/../src/chrome/") . "/";
$echoOnly = false;
$extensionInfo = json_decode(file_get_contents($basedir . "_locales/core.json"), true);
$pluralRule = json_decode(file_get_contents($basedir . "_locales/plural_rule.json"), true);
$plurals = array();
$messages = array();

function callback_plural_placeholder ($re)
{
	global $plurals;
	$id = "_plural_" . $re[1];
	if (!isset($plurals[$id])) {
		$plurals[$id] = array(
			"message" => $re[1] . "s"
		);
		$plurals[$id . "@one"] = array(
			"message" => $re[1]
		);
	}
	return $re[1];
}

function get_id ($message)
{
	$message = strtolower($message);
	$message = preg_replace('/\{(\d+)\}/', '@$1', $message);
	$message = preg_replace_callback('/\{(\w+):\d+\}/', "callback_plural_placeholder", $message);
	$message = preg_replace('/[^A-Za-z0-9_@ ]/', '', $message);
	$message = preg_replace('/ +/', '_', $message);
	return $message;
}

function build_base_locale_message ($file)
{
	global $messages;
	$result = true;
	$fp = fopen($file, "rb");
	if ($fp) {
		$lineNumber = 1;
		while (($line = fgets($fp)) !== false) {
			if (preg_match('/\b_\(\'((\\\\\'|[^\'])+)\'/', $line, $re)) {
				$message = str_replace("\\'", "'", $re[1]);
				$id = get_id($message);
				if (isset($messages[$id])) {
					if ($messages[$id]["description"] != $message) {
						echo "\n*** ID conflict! ***\n";
						echo "\t   line number: ", $lineNumber, "\n";
						echo "\t            id: ", $id, "\n";
						echo "\tstored message: ", $messages[$id]["description"], "\n";
						echo "\t   new message: ", $message, "\n";
						$result = false;
					}
				}
				else {
					$messages[$id] = array(
						"message" => $message,
						"description" => $message
					);
				}
			}
			$lineNumber++;
		}
		fclose($fp);
	}
	return $result;
}

function update_localized_messages ($src)
{
	global $basedir;
	$dir = realpath($basedir . "_locales");
	$h = opendir($dir);
	if ($h) {
		while (($file = readdir($h)) !== false) {
			if ($file == "." || $file == "..") continue;
			if (!is_dir($dir . "/" . $file)) continue;
			if ($file == "en_US") continue;
			$localizedFileName = $dir . "/" . $file . "/messages.json";
			if (!file_exists($localizedFileName)) continue;
			update_localized_message($src, $file, $localizedFileName);
		}
		closedir($h);
	}
}

function update_localized_message ($src, $locale, $localized)
{
	global $echoOnly;

	$dstText = file_get_contents($localized);
	$dst = json_decode($dstText, true);
	if (!is_array($dst)) {
		echo "not a array:\n";
		exit(1);
	}

	$dst = (array)$dst;

	$result = array();
	$newKeys = array();
	foreach ($src as $k => $v) {
		if (isset($dst[$k])) {
			$result[$k] = $dst[$k];
			if (isset($src[$k]["description"])) {
				$result[$k]["description"] = $src[$k]["description"];
			}
		}
		else {
			$result[$k] = $src[$k];
			$newKeys[] = $k;
		}
	}

	$result = json_encode($result, ENCODE_OPTS);
	if ($result == $dstText) {
		echo $locale, ": no changes.\n";
	}
	else {
		if ($echoOnly) {
			echo "\nlocale $locale:\n";
			echo $result;
			echo "\n";
		}
		else {
			file_put_contents($localized, $result);
		}

		echo $locale, ": ", implode(", ", $newKeys), "\n";
	}
}

function main ($argv)
{
	global $basedir;
	global $echoOnly;

	global $extensionInfo;
	global $pluralRule;
	global $plurals;
	global $messages;

	foreach ($argv as $arg) {
		echo "reading: ", realpath($arg), "\n";
		if (!build_base_locale_message($arg)) {
			$messages = null;
			break;
		}
	}
	echo "\n\n\n";

	if (is_array($messages)) {
		ksort($messages);
		$messages = $extensionInfo + $pluralRule + $plurals + $messages;
		foreach ($messages as $key => $message) {
			if (isset($message["description"])) {
				$messages[$key]["description"] = $messages[$key]["message"];
			}
		}

		update_localized_messages($messages);

		$messages = json_encode($messages, ENCODE_OPTS);

		if ($echoOnly) {
			echo "\nsource messages:\n";
			echo $messages;
			echo "\n";
		}
		else {
			file_put_contents(
				$basedir . "_locales/en_US/messages.json", $messages);
		}

		echo "done.\n";
	}
}

function parse_args ($argv) {
	global $basedir;
	global $echoOnly;

	$args = array();
	$result = array();
	array_shift($argv);

	// path 1
	foreach ($argv as $arg) {
		if (preg_match('/^--indir=(.+)/', $arg, $re)) {
			$basedir = realpath($re[1]) . "/";
		}
		elseif (preg_match('/^--echo$/', $arg)) {
			$echoOnly = true;
		}
		else {
			$args[] = $arg;
		}
	}

	// path 2
	foreach ($args as $arg) {
		$file = $arg;
		if (file_exists($file)) {
			$result[] = $file;
			continue;
		}

		$file = $basedir . "/" . $arg;
		if (file_exists($file)) {
			$result[] = $file;
			continue;
		}
	}

	if (count($result) == 0) {
		echo "file not specified. stop.";
		exit(1);
	}

	return $result;
}

main(parse_args($argv));
