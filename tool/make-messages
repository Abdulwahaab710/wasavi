#! /usr/bin/php
<?php
$basedir = realpath(dirname(__FILE__) . "/../src/chrome/") . "/";
$echoOnly = false;
$extensionInfo = array(
	"wasavi_locale" => array(
		"message" => "english (USA)"
	),
	"wasavi_locale_code" => array(
		"message" => "en-US"
	),
	"wasavi_desc" => array(
		"message" => "vi editor for any web page.",
		"description" => ""
	),
	"option_title" => array(
		"message" => "wasavi options",
		"description" => ""
	),
	"option_exrc_desc" => array(
		"message" => "Enter initialization commands for wasavi. These commands will be executed every time wasavi is launched. You can write any ex commands you like.",
		"description" => ""
	),
	"option_quick_activation_on" => array(
		"message" => "when an element is focused",
		"description" => ""
	),
	"option_quick_activation_off" => array(
		"message" => "when a key combination is entered",
		"description" => ""
	),
	"option_target_elements_desc" => array(
		"message" => "* Format is <[modifier-]key>,...\nFor example, <c-enter>, <insert> means \"Launch wasavi when ctrl+enter or insert is pressed.\"\n* Following keys can be used: backspace, bs, tab, enter, return, ret, pageup, pagedown, end, home, left, up, right, down, insert, ins, delete, del, f1 to f12, a to z, and 0 to 9.\n* Following keys can be used as modifier:s (for SHIFT), c (for CTRL).\n* If text field is left empty default shortcut <c-enter>, <insert> is used.",
		"description" => ""
	),
	"option_save" => array(
		"message" => "Save",
		"description" => ""
	),
	"option_saved" => array(
		"message" => "saved.",
		"description" => ""
	),
	"option_exrc_head" => array(
		"message" => "exrc",
		"description" => ""
	),
	"option_target_elements_head" => array(
		"message" => "target elements",
		"description" => ""
	),
	"option_starting_type_head" => array(
		"message" => "Launch wasavi",
		"description" => ""
	),
	"option_font_family_head" => array(
		"message" => "font family",
		"description" => ""
	),
	"option_preferred_storage_head" => array(
		"message" => "preferred storage",
		"description" => ""
	),
	"option_init_head" => array(
		"message" => "Initialize",
		"description" => ""
	),
	"option_init_desc" => array(
		"message" => "Initialize all options",
		"description" => ""
	),
	"option_init_confirm" => array(
		"message" => "Are you sure?",
		"description" => ""
	),
	"option_debug_head" => array(
		"message" => "Debug",
		"description" => ""
	),
	"option_log_desc" => array(
		"message" => "Enable logging",
		"description" => ""
	),
	"option_readme" => array(
		"message" => "README",
		"description" => ""
	),
	"option_license" => array(
		"message" => "LICENSE",
		"description" => ""
	),
	"option_notice" => array(
		"message" => "NOTICE",
		"description" => ""
	),
	"edit_with_wasavi" => array(
		"message" => "Edit with wasavi",
		"description" => "Edit with wasavi"
	),
);
$pluralRule = array(
	"_plural_rule@function" => array(
		"message" => "isone(one)"
	)
);
$plurals = array();
$messages = array();

function callback_plural_placeholder ($re)
{
	global $plurals;
	$id = "_plural_" . $re[1];
	if (!isset($plurals[$id])) {
		$plurals[$id] = array(
			"message" => $re[1] . "s"
		);
		$plurals[$id . "@one"] = array(
			"message" => $re[1]
		);
	}
	return $re[1];
}

function get_id ($message)
{
	$message = strtolower($message);
	$message = preg_replace('/\{(\d+)\}/', '@$1', $message);
	$message = preg_replace_callback('/\{(\w+):\d+\}/', "callback_plural_placeholder", $message);
	$message = preg_replace('/[^A-Za-z0-9_@ ]/', '', $message);
	$message = preg_replace('/ +/', '_', $message);
	return $message;
}

function doit ($file)
{
	global $messages;
	$result = true;
	$fp = fopen($file, "rb");
	if ($fp) {
		$lineNumber = 1;
		while (($line = fgets($fp)) !== false) {
			if (preg_match('/\b_\(\'((\\\\\'|[^\'])+)\'/', $line, $re)) {
				$message = str_replace("\\'", "'", $re[1]);
				$id = get_id($message);
				if (isset($messages[$id])) {
					if ($messages[$id]["description"] != $message) {
						echo "\n*** ID conflict! ***\n";
						echo "\t   line number: ", $lineNumber, "\n";
						echo "\t            id: ", $id, "\n";
						echo "\tstored message: ", $messages[$id]["description"], "\n";
						echo "\t   new message: ", $message, "\n";
						$result = false;
					}
				}
				else {
					$messages[$id] = array(
						"message" => $message,
						"description" => $message
					);
				}
			}
			$lineNumber++;
		}
		fclose($fp);
	}
	return $result;
}

function update_localized_messages ($src)
{
	global $basedir;
	$dir = realpath($basedir . "_locales");
	$h = opendir($dir);
	if ($h) {
		while (($file = readdir($h)) !== false) {
			if ($file == "." || $file == "..") continue;
			if (!is_dir($dir . "/" . $file)) continue;
			if ($file == "en_US") continue;
			$localizedFileName = $dir . "/" . $file . "/messages.json";
			if (!file_exists($localizedFileName)) continue;
			update_localized_message($src, $file, $localizedFileName);
		}
		closedir($h);
	}
}

function update_localized_message ($src, $locale, $localized)
{
	global $echoOnly;

	$dstText = file_get_contents($localized);
	$dst = json_decode($dstText, true);
	if (!is_array($dst)) {
		echo "not a array:\n";
		exit(1);
	}

	$dst = (array)$dst;

	$result = array();
	$newKeys = array();
	foreach ($src as $k => $v) {
		if (isset($dst[$k])) {
			$result[$k] = $dst[$k];
			if (isset($src[$k]["description"])) {
				$result[$k]["description"] = $src[$k]["description"];
			}
		}
		else {
			$result[$k] = $src[$k];
			$newKeys[] = $k;
		}
	}

	$result = json_encode($result, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
	if ($result == $dstText) {
		echo $locale, ": no changes.\n";
	}
	else {
		if ($echoOnly) {
			echo "\nlocale $locale:\n";
			echo $result;
			echo "\n";
		}
		else {
			file_put_contents($localized, $result);
		}

		echo $locale, ": ", implode(", ", $newKeys), "\n";
	}
}

function main ($argv)
{
	global $basedir;
	global $echoOnly;

	global $extensionInfo;
	global $pluralRule;
	global $plurals;
	global $messages;

	foreach ($argv as $arg) {
		echo "reading: ", realpath($arg), "\n";
		if (!doit($arg)) {
			$messages = null;
			break;
		}
	}

	if (is_array($messages)) {
		$messages = $extensionInfo + $pluralRule + $plurals + $messages;
		foreach ($messages as $key => $message) {
			if (isset($message["description"])) {
				$messages[$key]["description"] = $messages[$key]["message"];
			}
		}
		update_localized_messages($messages);
		$messages = json_encode(
			$messages, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);

		if ($echoOnly) {
			echo "\nsource messages:\n";
			echo $messages;
			echo "\n";
		}
		else {
			file_put_contents(
				$basedir . "_locales/en_US/messages.json", $messages);
		}

		echo "done.\n";
	}
}

function parse_args ($argv) {
	global $basedir;
	global $echoOnly;

	$args = array();
	$result = array();
	array_shift($argv);

	// path 1
	foreach ($argv as $arg) {
		if (preg_match('/^--indir=(.+)/', $arg, $re)) {
			$basedir = realpath($re[1]) . "/";
		}
		elseif (preg_match('/^--echo$/', $arg)) {
			$echoOnly = true;
		}
		else {
			$args[] = $arg;
		}
	}

	// path 2
	foreach ($args as $arg) {
		$file = $arg;
		if (file_exists($file)) {
			$result[] = $file;
			continue;
		}

		$file = $basedir . "/" . $arg;
		if (file_exists($file)) {
			$result[] = $file;
			continue;
		}
	}

	if (count($result) == 0) {
		$result = array(
			$basedir . "frontend/wasavi.js"
		);
	}

	return $result;
}

main(parse_args($argv));
