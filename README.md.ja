wasavi (VI editor for any web page)
====================================

wasavi は Chrome、Opera、Firefox 用のエクステンションです。 wasavi はあらゆるページ上の TEXTAREA 要素を VI エディタ化します。wasavi はほぼすべての VI コマンド、およびいくつかの ex コマンドをサポートします。

wasavi の作成は継続中です。バグレポートや機能の要請はどんなものでも歓迎します。

簡単な使い方
============

* ネイティブな TEXTAREA があったとき

  ![ネイティブな textarea](http://appsweets.net/wasavi/wasavi_native_textarea.jpg)

* TEXTAREA にフォーカスし、`Ctrl+Enter` を押すと wasavi が起動します

  ![wasavi が実行中](http://appsweets.net/wasavi/wasavi.jpg)

込み入った使い方
----------------

* wasavi はいくつかの ex コマンドをサポートします。これは `:set all` したところ

  ![set all](http://appsweets.net/wasavi/wasavi_set_all.jpg)

* Vim のインクリメンタルサーチ

  ![インクリメンタルサーチ](http://appsweets.net/wasavi/wasavi_incremental_search.jpg)

* [オンラインアプリとしての wasavi](http://wasavi.appsweets.net/)。 このリンクを wasavi をインストールしたブラウザで開くと自動的に wasavi が起動し、dropbox/google drive アカウント上のファイルを読み書きできます。

  ![stand alone](http://appsweets.net/wasavi/wasavi_stand_alone.png)


インストール
============

現在、wasavi は以下のブラウザで動作します。各ブラウザで以下のリンクをクリックし、標準的なエクステンションのインストール方法に従ってください。これらのエクステンションは各ブラウザのアドオン・ストアに登録されています。

* [Google Chrome extension](https://chrome.google.com/webstore/detail/dgogifpkoilgiofhhhodbodcfgomelhe?hl=ja)

* [Opera addon](https://addons.opera.com/ja/extensions/details/wasavi/)

* [Firefox addon](https://addons.mozilla.org/ja/firefox/addon/wasavi/)

最新の開発版は [ここ](http://appsweets.net/wasavi/) でダウンロードできます。

ソースコードは [Github](https://github.com/akahuku/wasavi) で管理しています。

### Opera ユーザへの注意

Opera は DOM3 Composition Event をサポートしていないので、IME を通した入力は保証されません。

よく聞かれる質問
================

## wasavi の起動

TEXTAREA にフォーカスし、`Ctrl+Enter` を押してください。


## wasavi の終了

wasavi を終了するには `ZZ`、`:q`、`:wq` などの VI の終了コマンドを入力してください。

## Firefox で Vimperator と共存する

[wasavi_mediator.js](https://raw.github.com/akahuku/wasavi/master/mediators/vimperator/wasavi_mediator.js) を Vimperator のプラグインディレクトリに置いてください。たとえば `~/.vimperator/plugin` や `%HOME%\vimperator\plugin` です。

このプラグインは wasavi の状態に従って Vimperator のパススルーモードを制御します。

[オンラインアプリとしての wasavi](http://wasavi.appsweets.net/) では、Vimperator に対して `:ignorekeys add ^http://wasavi\\.appsweets\\.net/` を与えてください。このページは Vimperator は常にパススルーモードになります。`ignorekeys` の設定は自動的に保存されるので、コマンドは再入力する必要はありません。


## 単体のテキストエディタとしての利用

wasavi をインストールし、リンク [オンラインアプリとしての wasavi](http://wasavi.appsweets.net/) を開いてください。wasavi が自動的に起動します。この状態では、Dropbox/Google Drive のファイルに対して ex コマンド `:read`、`:write`、`:edit`、`:file` が使用できます。Dropbox/Google Drive へのアクセスのために OAuth による承認が必要です。

## バグを見つけた

[wasavi issue tracker](http://github.com/akahuku/wasavi/issues) で issue を作成してください。

Tips and Tricks
===============

* wasavi の最大化: `:set fullscreen` or `:set fs`
* wasavi を元に戻す: `:set nofullscreen` or `:set nofs`
* カラーテーマを変える: `:set theme=blight` or `:set theme=charcoal`
* 初期設定を変更する:
  各ブラウザのエクステンション管理機能から wasavi の設定ページを開き
  （または wasavi 上で `:options` と入力）、"exrc" テキストボックスを編集する
* :abbreviate の文法は:
	+ `:abbreviate` は、登録されている全ての略語を表示します
	+ `:abbreviate [clear]` は、全ての略語を削除します
	+ `:abbreviate lhs` は、lhs に対応する略語を表示します
	+ `:abbreviate lhs rhs` は、lhs を rhs に展開する略語を登録します
* :map の文法は:
	+ `:map` は、登録されている全てのマップを表示します
	+ `:map [clear]` は、全てのマップを削除します
	+ `:map lhs rhs` は、lhs を rhs に変換するマップを登録します。この変換は再帰します
	+ `:map [noremap] lhs rhs` も登録しますが、
	  こちらは再帰しません
	+ `:map` はノーマルモード用のマップを対象とします。一方、
	  `:map!` は挿入モード用です
* j k ^ $ はカーソルを物理行単位で移動させます。一方、gj gk g^ g$ は
  折り返し行単位で移動させます。この振る舞いを交換するには: `:set jkdenotative`
* 日本語のための f/F/t/T の拡張: これらのコマンドはひらがな、カタカナ、および
  漢字の読み（ローマ字での表現）を認識します。たとえば、`fk` は「漢」の上に
  カーソルを置きます。
* オンラインストレージをファイルシステムとして使用する:
	+ `:filesystem status` は、現在使用可能なファイルシステムを表示します
	+ `:filesystem default` は、デフォルトのファイルシステムを取得します。
	  設定の際は `:filesystem default dropbox` や `:filesystem default gdrive` と入力します
	+ `:filesystem reset` はアクセストークンを破棄します。こちらも、ファイルシステム名を
	  指定することができます
	+ ファイル名の先頭にファイルシステム名を明示することができます: `:read dropbox:/hello.txt`



実装済みコマンド
================

* [count] operation [count] motion
* [count] operation [count] range-symbol
* [count] operation-alias
* [count] motion
* [count] scroll-command
* [count] edit-command
* : ex-command

Operations
----------

c y d &gt; &lt; gq

Operations Aliases
------------------

cc yy dd &gt;&gt; &lt;&lt; C Y D gqq

Motion
------

&#45; &#43; ^ &lt;home&gt; $ &lt;end&gt; % | comma(,) ;
  &#95; / ? ' ` ( ) { } [[ ]] &lt;enter&gt; 0
  j k h l ^N ^P ^H
  &lt;down&gt; &lt;up&gt; &lt;left&gt; &lt;right&gt; &lt;space&gt;
  w W b B e E gg gj gk g^ g$ gi G H M L f F t T n N

Vim のテキストオブジェクト（レンジシンボル）
-------------------------------------------

* a" a' a` a[ a] a{ a} aB a< a> a( a) ab aw aW ap as
* i" i' i` i[ i] i{ i} iB i< i> i( i) ib iw iW ip is

Scroll commands
---------------

^U ^D ^Y ^E ^B ^F &lt;pageup&gt; &lt;pagedown&gt; z&lt;enter&gt; z. zz z-

Edit commands
-------------

x X &lt;delete&gt; p P J period( . ) u ^R ~ ^L ^G m @ q r R a A i I o O & s S ZZ

ex commands
-----------

abbreviate cd chdir copy delete edit file filesystem global join k map mark marks move options print put pwd quit read redo s & ~ set registers to unabbreviate undo unmap version v write wq xit yank > < @ &#42;

ex コマンドのアドレス指定は絶対行番号、相対行番号、正規表現のいずれも可能です。オフセットを付加することも可能です。


入力モードのコマンド
--------------------

^@: 最後に入力したテキストを入力し、input モードを抜ける
^D: 最後に入力した文字が '0' か '^' のとき、インデントを全て削除する
^H: 1 文字削除
^R: レジスタの内容を貼り付ける
^T: シフト
^U: input セッションで入力されたすべての文字を取り消す
^V: 1 文字入力のためのエスケープシーケンス
^W: 1 単語削除

^@ は実際には `ctrl+space` です。

行入力モードのコマンド
---------------------

* ^A: カーソルを行頭へ
* ^B: 1 文字戻る
* ^E: カーソルを行末へ
* ^F: 1 文字前へ
* ^H: 1 文字削除
* ^N: 次の履歴
* ^P: 前の履歴
* ^R: レジスタの内容を貼り付ける
* ^U: 行全体を削除
* ^V: 1 文字入力のためのエスケープシーケンス
* ^W: 1 単語削除
* `tab`: ex コマンド名、set オプション名、read/edit/write/file のファイル名引数の補完


Vim 互換の機能
--------------

* 多段 undo/redo
* インクリメンタルサーチ
* レンジシンボル（Vim で言うところのテキストオブジェクト）
* レジスタ "、:、*、/（特に * はクリップボードとのアクセスを行うので重要です）
* textwidth > 0 の状態における input モードの自動整形、および自動整形オペレータ（gq コマンド）
* オプション iskeyword、incsearch、smartcase、undolevels、quoteescape、relativenumber、textwidth
